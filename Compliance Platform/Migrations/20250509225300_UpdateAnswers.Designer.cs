// <auto-generated />
using System;
using Compliance_Platform.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Compliance_Platform.Migrations
{
    [DbContext(typeof(CompPlatformDbContext))]
    [Migration("20250509225300_UpdateAnswers")]
    partial class UpdateAnswers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Treść")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WagaRyzyka")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTemplateId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudytorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompPlatformQuestionnairesId")
                        .HasColumnType("int");

                    b.Property<int>("CompPlatformToolId")
                        .HasColumnType("int");

                    b.Property<string>("CompPlatformUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DataSprawdzenia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataZlozenia")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("KalkulacjaRyzyka")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PoziomRyzyka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AudytorId");

                    b.HasIndex("CompPlatformQuestionnairesId");

                    b.HasIndex("CompPlatformToolId");

                    b.HasIndex("CompPlatformUserId");

                    b.ToTable("InstancesTool");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformInstanceAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompPlatformInstanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataOdpowiedzi")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstanceId")
                        .HasColumnType("int");

                    b.Property<string>("OdpowiedzTekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpcjaOdpowiedziId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTemplateId")
                        .HasColumnType("int");

                    b.Property<decimal>("WagaRyzykaPojedyncza")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WnioskujacyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompPlatformInstanceId");

                    b.HasIndex("OpcjaOdpowiedziId");

                    b.HasIndex("QuestionTemplateId");

                    b.HasIndex("WnioskujacyId");

                    b.ToTable("InstanceAnswers");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformQuestionnaires", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aktywny")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Kategoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireId")
                        .HasColumnType("int");

                    b.Property<string>("Tresc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypPytania")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WagaRyzyka")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Wymagane")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataPowstania")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kategoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WlascicielId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WlascicielId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Departament")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Rola")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformVerificationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstanceId")
                        .HasColumnType("int");

                    b.Property<string>("NewStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuditorId");

                    b.HasIndex("InstanceId");

                    b.ToTable("VerificationHistory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformAnswers", b =>
                {
                    b.HasOne("Compliance_Platform.Model.CompPlatformQuestions", "Questions")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformInstance", b =>
                {
                    b.HasOne("Compliance_Platform.Model.CompPlatformUser", "Audytor")
                        .WithMany()
                        .HasForeignKey("AudytorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Compliance_Platform.Model.CompPlatformQuestionnaires", "CompPlatformQuestionnaires")
                        .WithMany()
                        .HasForeignKey("CompPlatformQuestionnairesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compliance_Platform.Model.CompPlatformTool", "CompPlatformTool")
                        .WithMany()
                        .HasForeignKey("CompPlatformToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compliance_Platform.Model.CompPlatformUser", null)
                        .WithMany("ToolInstance")
                        .HasForeignKey("CompPlatformUserId");

                    b.Navigation("Audytor");

                    b.Navigation("CompPlatformQuestionnaires");

                    b.Navigation("CompPlatformTool");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformInstanceAnswer", b =>
                {
                    b.HasOne("Compliance_Platform.Model.CompPlatformInstance", "CompPlatformInstance")
                        .WithMany("Answers")
                        .HasForeignKey("CompPlatformInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compliance_Platform.Model.CompPlatformAnswers", "OpcjaOdpowiedzi")
                        .WithMany()
                        .HasForeignKey("OpcjaOdpowiedziId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Compliance_Platform.Model.CompPlatformQuestions", "CompPlatformQuestions")
                        .WithMany()
                        .HasForeignKey("QuestionTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Compliance_Platform.Model.CompPlatformUser", "Wnioskujacy")
                        .WithMany()
                        .HasForeignKey("WnioskujacyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompPlatformInstance");

                    b.Navigation("CompPlatformQuestions");

                    b.Navigation("OpcjaOdpowiedzi");

                    b.Navigation("Wnioskujacy");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformQuestionnaires", b =>
                {
                    b.HasOne("Compliance_Platform.Model.CompPlatformUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformQuestions", b =>
                {
                    b.HasOne("Compliance_Platform.Model.CompPlatformQuestionnaires", "Questionnaires")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaires");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformTool", b =>
                {
                    b.HasOne("Compliance_Platform.Model.CompPlatformUser", "Wlasciciel")
                        .WithMany("Tool")
                        .HasForeignKey("WlascicielId");

                    b.Navigation("Wlasciciel");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformVerificationHistory", b =>
                {
                    b.HasOne("Compliance_Platform.Model.CompPlatformUser", "Auditor")
                        .WithMany()
                        .HasForeignKey("AuditorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Compliance_Platform.Model.CompPlatformInstance", "Instance")
                        .WithMany()
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditor");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Compliance_Platform.Model.CompPlatformUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Compliance_Platform.Model.CompPlatformUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Compliance_Platform.Model.CompPlatformUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Compliance_Platform.Model.CompPlatformUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformInstance", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformQuestionnaires", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformQuestions", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Compliance_Platform.Model.CompPlatformUser", b =>
                {
                    b.Navigation("Tool");

                    b.Navigation("ToolInstance");
                });
#pragma warning restore 612, 618
        }
    }
}
