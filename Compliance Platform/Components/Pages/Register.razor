@page "/register"
@using Microsoft.AspNetCore.Identity
@using Compliance_Platform.Model
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations
@inject UserManager<CompPlatformUser> UserManager
@inject SignInManager<CompPlatformUser> SignInManager
@inject NavigationManager NavigationManager
@inject RoleManager<IdentityRole> RoleManager
@inject ILogger<Register> Logger
@rendermode InteractiveServer

<PageTitle>Rejestracja</PageTitle>

<div class="row">
    <div class="col-md-6 offset-md-3">
        <div class="card">
            <div class="card-header">
                <h3>Rejestracja</h3>
            </div>
            <div class="card-body">
                <EditForm FormName="RegisterForm" Model="@registerModel" OnValidSubmit="HandleRegistration">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="imie" class="form-label">Imię</label>
                            <InputText id="imie" @bind-Value="registerModel.Imie" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Imie)" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="nazwisko" class="form-label">Nazwisko</label>
                            <InputText id="nazwisko" @bind-Value="registerModel.Nazwisko" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Nazwisko)" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="departament" class="form-label">Departament</label>
                        <InputText id="departament" @bind-Value="registerModel.Departament" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="rola" class="form-label">Role</label>
                        <InputSelect id="rola" @bind-Value="registerModel.Rola" class="form-select">
                            <option value="">-- Wybierz rolę --</option>
                            <option value="Rejestrator">Rejestrator</option>
                            <option value="Audytor">Audytor</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => registerModel.Rola)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Hasło</label>
                        <InputText id="password" type="password" @bind-Value="registerModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Potwierdź hasło</label>
                        <InputText id="confirmPassword" type="password" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Zarejestruj</button>
                    </div>
                </EditForm>

                <div class="mt-3 text-center">
                    <p>Masz już konto? <a href="/login">Login</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;
    private List<string> registrationErrors = new();

    private async Task HandleRegistration()
    {
        registrationErrors.Clear();
        Logger.LogInformation("Proces rejestracji rozpoczęty dla {Email}", registerModel.Email);
        //Console.WriteLine("HandleLogin called");
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Hasło i potwierdzenie hasła nie pasują.";
            return;
        }
       
            var user = new CompPlatformUser
                {
                    UserName = registerModel.Email,
                    Email = registerModel.Email,
                    Imie = registerModel.Imie,
                    Nazwisko = registerModel.Nazwisko,
                    Departament = registerModel.Departament,
                    Rola = registerModel.Rola
                };
            Logger.LogDebug("Próba utworzenia użytkownika: UserName={UserName}, Email={Email}, Imie={Imie}, Nazwisko={Nazwisko}, Rola={Rola}",
    user.UserName, user.Email, user.Imie, user.Nazwisko, user.Rola);

            try
            {
                Logger.LogInformation("Wywołanie UserManager.CreateAsync dla {Email}", user.Email);
                var result = await UserManager.CreateAsync(user, registerModel.Password);
                Logger.LogInformation("UserManager.CreateAsync zakończone dla {Email}. Powodzenie: {Succeeded}", user.Email, result.Succeeded);

                if (result.Succeeded)
                {
                    Logger.LogInformation("Użytkownik {Email} utworzony pomyślnie. Próba przypisania roli {Role}", user.Email, user.Rola);
                    bool roleExists = await RoleManager.RoleExistsAsync(user.Rola);
                    Logger.LogInformation("Rola {Role} istnieje: {Exists}", user.Rola, roleExists);
                    if(roleExists)
                    {
                        var roleResult = await UserManager.AddToRoleAsync(user, user.Rola);
                        if (roleResult.Succeeded)
                        {
                            Logger.LogInformation("Pomyślnie przypisano rolę {Role} do użytkownika {Email}", user.Rola, user.Email);
                        }
                        else
                        {
                            Logger.LogError("Nie udało się przypisać roli {Role} do użytkownika {Email}", user.Rola, user.Email);
                            foreach (var error in roleResult.Errors)
                            {
                                Logger.LogError("Błąd przypisania roli: {Code} - {Description}", error.Code, error.Description);
                                registrationErrors.Add($"Błąd przypisania roli: {error.Description}");
                            }
                        }
                    }
                    else
                    {
                        Logger.LogError("Rola {Role} nie istnieje. Nie można przypisać do użytkownika {Email}", user.Rola, user.Email);
                        registrationErrors.Add($"Błąd: Rola '{user.Rola}' nie istnieje w systemie.");
                    }
                    if (!registrationErrors.Any())
                    {
                        Logger.LogInformation("Rejestracja i przypisanie roli pomyślne dla {Email}. Przekierowanie do logowania.", user.Email);
                        NavigationManager.NavigateTo("/login", forceLoad: true);
                    }
                    else
                    {
                        Logger.LogWarning("Rejestracja zakończona dla {Email}, ale wystąpiły błędy w krokach po utworzeniu.", user.Email);
                    }
                }
                else
                {
                    Logger.LogWarning("UserManager.CreateAsync nie powiodło się dla {Email}.", user.Email);
                    foreach (var error in result.Errors)
                    {
                        // *** Loguj *każdy* błąd Identity ***
                        Logger.LogError("Błąd rejestracji dla {Email}: {Code} - {Description}", user.Email, error.Code, error.Description);
                        registrationErrors.Add(error.Description);
                    }
                }     
            }         
        catch (Exception ex)
        {
                Logger.LogError(ex, "Wystąpił nieoczekiwany wyjątek podczas procesu rejestracji dla {Email}", registerModel.Email);
                registrationErrors.Add($"Wystąpił krytyczny błąd serwera podczas rejestracji: {ex.GetType().Name}. Skontaktuj się z administratorem.");
            StateHasChanged();
            Console.WriteLine(ex);
        }
    }

    private class RegisterModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Niewłaściwy format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Imię jest wymagane")]
        public string Imie { get; set; } = string.Empty;

        [Required(ErrorMessage = "Nazwisko jest wymagane")]
        public string Nazwisko { get; set; } = string.Empty;

        public string? Departament { get; set; }

        [Required(ErrorMessage = "Rola jest wymagana")]
        public string Rola { get; set; } = string.Empty;

        [Required(ErrorMessage = "Hasło jest wymagane")]
        [StringLength(100, ErrorMessage = "{0} musi mieć co najmniej {2} znaków.", MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;

        [Compare("Password", ErrorMessage = "Hasło i potwierdzenie hasła nie pasują")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
