@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms;
@using Compliance_Platform.Model
@using System.ComponentModel.DataAnnotations
@inject UserManager<CompPlatformUser> UserManager
@inject SignInManager<CompPlatformUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<Login> Logger
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer

<PageTitle>Logowanie</PageTitle>

<div class="row">
    <div class="col-md-6 offset-md-3">
        <div class="card rounded-lg shadow-sm">
            <div class="card-header bg-primary text-white rounded-top-lg">
                <h3>Logowanie</h3>
            </div>
            <div class="card-body p-4">       
                <EditForm Model="@loginModel" OnValidSubmit="@HandleValidFormSubmit" OnInvalidSubmit="@HandleInvalidFormSubmit" FormName="LoginForm">
                                          
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (loginErrors.Any())
                    {
                        <div class="alert alert-danger my-3" role="alert">
                                @foreach (var error in loginErrors)
                                {
                                    <p class="mb-0">@error</p>
                                }
                        </div>
                    }

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                        @* --- DEBUG LINE: Display bound email value directly in UI --- *@
                        @*<p class="form-text text-muted small mt-1">DEBUG UI: Model.Email = "@loginModel.Email"</p>*@
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Hasło</label>
                        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        @* --- DEBUG LINE: Display if password is empty directly in UI --- *@
                        @*<p class="form-text text-muted small mt-1">DEBUG UI: Model.Password is empty = @(string.IsNullOrEmpty(loginModel.Password))</p>*@
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                        <label class="form-check-label" for="rememberMe">Zapamiętaj mnie</label>
                    </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isProcessing">@(isProcessing ? "Ładowanie..." : "Zaloguj")</button>
                        </div>
                    
                    </EditForm>
                
                <div class="mt-4 text-center">
                    <p>Nie masz konta? <a href="/register" class="text-primary">Zarejestruj!</a></p>
                </div>

                <div class="mt-3">
                    <button type="button" class="btn btn-outline-secondary" @onclick="DemoAdminLogin">
                        Demo: Zaloguj jako Admin
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public class LoginModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Niewłaściwy format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Hasło jest wymagane")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }

    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    //private EditContext? editContext;
    private bool isProcessing = false;
    private int loginModelHashCodeOnInit;
    private List<string> loginErrors = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        loginModelHashCodeOnInit = loginModel.GetHashCode();
        Console.WriteLine($"Login.OnInitialized: Model HashCode: {loginModelHashCodeOnInit}. Email on init: '{loginModel.Email}'");
    }

    private async Task HandleValidFormSubmit()
    {
        Logger.LogWarning("====== HandleValidFormSubmit WYWOŁANE ======");
        Logger.LogInformation("HandleValidFormSubmit Start. Email: '{Email}', Posiada hasło: {HasPassword}", loginModel.Email, !string.IsNullOrEmpty(loginModel.Password));
        //Logger.LogDebug("Current Model HashCode: {CurrentHash} (Initial was: {InitialHash})", loginModel.GetHashCode(), loginModelHashCodeOnInit);
        loginErrors.Clear();
        await HandleLogin();
    }

    private void HandleInvalidFormSubmit(EditContext context)
    {
        var validationMessages = context.GetValidationMessages(); // Pobierz wszystkie komunikaty walidacyjne
        if (validationMessages.Any())
        {
            Logger.LogWarning("Wykryto następujące błędy walidacji:");
            foreach (var message in validationMessages)
            {
                Logger.LogWarning("- {ValidationMessage}", message); // Loguj każdy komunikat
                loginErrors.Add(message); // Dodaj do listy, aby wyświetlić w UI
            }
        }
        else
        {
            Logger.LogWarning("HandleInvalidFormSubmit wywołane, ale GetValidationMessages() nie zwróciło błędów. Model może być nieprawidłowy z innego powodu.");
            loginErrors.Add("Formularz zawiera nieokreślone błędy walidacji.");
        }
        StateHasChanged();
    }

    public class LoginResult
    {
        public bool succeeded { get; set; }
    }

    private async Task HandleLogin()
    {
        Logger.LogWarning("====== HandleLogin WYWOŁANE ======");
        isProcessing = true;
        //StateHasChanged();
        Logger.LogInformation("Próba logowania użytkownika: {Email}", loginModel.Email);

        try
        {
            //Debug
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext != null && httpContext.Response.HasStarted)
            {
                Logger.LogWarning("ODPOWIEDŹ JUŻ ROZPOCZĘTA PRZED PasswordSignInAsync!");                
            }
            else
            {
                Logger.LogInformation("Odpowiedź NIE została jeszcze rozpoczęta przed PasswordSignInAsync.");
            }

            // Email jako nazwy użytkownika do logowania
            var result = await SignInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, loginModel.RememberMe, lockoutOnFailure: true);
            /*
            var client = HttpClientFactory.CreateClient("LocalAPI");
            var response = await client.PostAsJsonAsync("api/auth/login", loginModel);
            var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            */
            Logger.LogInformation("Wynik logowania dla {Email}: Powodzenie={Succeeded}, Zablokowany={IsLockedOut}, Niedozwolony={IsNotAllowed}",
                loginModel.Email, result.Succeeded, result.IsLockedOut, result.IsNotAllowed);

            if (result.Succeeded)
            {
                Logger.LogInformation("Logowanie użytkownika {Email} zakończone sukcesem.", loginModel.Email);
                NavigationManager.NavigateTo("/", true); // (forceLoad może pomóc odświeżyć stan autoryzacji)
            }
            
                        else if (result.IsLockedOut)
            {
                Logger.LogWarning("Konto użytkownika {Email} jest zablokowane.", loginModel.Email);
                loginErrors.Add("Twoje konto jest tymczasowo zablokowane z powodu zbyt wielu nieudanych prób logowania.");
            }
            else if (result.IsNotAllowed)
            {
                Logger.LogWarning("Logowanie niedozwolone dla użytkownika {Email} (np. brak potwierdzenia email).", loginModel.Email);
                loginErrors.Add("Logowanie nie jest możliwe. Czy potwierdziłeś swój adres email?"); // Dostosuj komunikat
            }
            else // Inne błędy (np. błędne hasło/email)
            {
                Logger.LogWarning("Nieudana próba logowania dla użytkownika {Email}.", loginModel.Email);
                loginErrors.Add("Nieprawidłowy email lub hasło.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Wystąpił nieoczekiwany wyjątek podczas próby logowania użytkownika {Email}", loginModel.Email);
            loginErrors.Add($"Wystąpił krytyczny błąd serwera: {ex.GetType().Name}. Spróbuj ponownie później.");
        }
        finally
        {
            isProcessing = false; // Odblokuj formularz
            StateHasChanged(); 
        }
    }

    private async Task DemoAdminLogin()
    {
        loginErrors.Clear();
        Logger.LogInformation("Próba logowania demo jako Admin");
        isProcessing = true;
        try
        {
            // Pre-fill na potrzeby dema - NIE NA PROD
            var demoEmail = "admin@example.com";
            var demoPassword = "Admin123!";        

            var result = await SignInManager.PasswordSignInAsync(demoEmail, demoPassword, isPersistent: false, lockoutOnFailure: false);

            if (result.Succeeded)
            {
                Logger.LogInformation("Logowanie demo jako Admin zakończone sukcesem.");
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                Logger.LogError("Nieudana próba logowania demo jako Admin. Result: {SignInResult}", result.ToString());
                loginErrors.Add("Logowanie demo nie powiodło się. Sprawdź konfigurację konta demo.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Wystąpił nieoczekiwany wyjątek podczas logowania demo");
            loginErrors.Add($"Wystąpił krytyczny błąd serwera podczas logowania demo: {ex.GetType().Name}.");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    } 
}