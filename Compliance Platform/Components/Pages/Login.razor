@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Compliance_Platform.Model
@using System.ComponentModel.DataAnnotations
@inject UserManager<CompPlatformUser> UserManager
@inject SignInManager<CompPlatformUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider



<PageTitle>Logowanie</PageTitle>

<div class="row">
    <div class="col-md-6 offset-md-3">
        <div class="card rounded-lg shadow-sm">
            <div class="card-header bg-primary text-white rounded-top-lg">
                <h3>Logowanie</h3>
            </div>
            <div class="card-body p-4">
                <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidFormSubmit" OnInvalidSubmit="@HandleInvalidFormSubmit" @*@onsubmit:preventDefault*@ FormName="LoginForm">
                    <DataAnnotationsValidator />
                    @* <ValidationSummary /> *@

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger my-3" role="alert">
                            @((MarkupString)errorMessage.Replace(";", "<br/>"))
                        </div>
                    }

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Hasło</label>
                        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                        <label class="form-check-label" for="rememberMe">Zapamiętaj mnie</label>
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@isProcessing">@(isProcessing ? "Ładowanie..." : "Zaloguj")</button>
                    </div>
                </EditForm>

                <div class="mt-3 text-center">
                    <p>Nie masz konta? <a href="/register">Zarejestruj!</a></p>
                </div>

                <div class="mt-3">
                    <button type="button" class="btn btn-outline-secondary" @onclick="DemoAdminLogin">
                        Demo: Zaloguj jako Admin
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public class LoginModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Niewłaściwy format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Hasło jest wymagane")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }

    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private EditContext? editContext;
    private bool isProcessing = false;


    protected override void OnInitialized()
    {
        editContext = new EditContext(loginModel);
        base.OnInitialized();
        Console.WriteLine("Zainicjowano logowanie");
    }

    private async Task HandleValidFormSubmit()
    {
        Console.WriteLine($"HandleValidFormSubmit. Email w modelu: '{loginModel.Email}', Hasło: '{(!string.IsNullOrEmpty(loginModel.Password) ? "Podane" : "Brak")}'");
        Console.WriteLine("Walidacja zakończona sukcesem (via OnValidSubmit). Próba logowania...");
        errorMessage = string.Empty; // Clear previous errors
        await HandleLogin();
    }

    private void HandleInvalidFormSubmit()
    {
        Console.WriteLine($"HandleInvalidFormSubmit. Email w modelu: '{loginModel.Email}', Hasło: '{(!string.IsNullOrEmpty(loginModel.Password) ? "Podane" : "Brak")}'");
        Console.WriteLine("Walidacja nie powiodła się (via OnInvalidSubmit).");

        var validationMessages = editContext?.GetValidationMessages()?.ToList() ?? new List<string>();
        if (validationMessages.Any())
        {
            errorMessage = string.Join("; ", validationMessages);
            Console.WriteLine("Błędy walidacji:");
            foreach (var msg in validationMessages)
            {
                Console.WriteLine($"- {msg}");
            }
        }
        else
        {
            // This case should ideally not be hit if DataAnnotationsValidator is working and there are errors.
            // It might indicate that the model is empty but somehow not triggering specific messages.
            errorMessage = "Sprawdź wprowadzone dane. Formularz zawiera błędy.";
            Console.WriteLine("Walidacja nie powiodła się, ale nie znaleziono konkretnych komunikatów (sprawdź model).");
        }
        StateHasChanged();
    }

        /*
        private async Task HandleFormSubmit(EditContext context)
        {
        Console.WriteLine($"Formularz wysłany {loginModel.Email}");
        errorMessage = string.Empty;

        // Walidacja
        bool isValid = context.Validate();
        Console.WriteLine($"Walidacja: {(isValid ? "Poprawna" : "Niepoprawna")}");

            if (isValid)
        {
        Console.WriteLine("Walidacja udana");
            await HandleLogin();
            }
            else
            {
            Console.WriteLine("Walidacja nieudana");
            var validationMessages = context.GetValidationMessages().ToList();
                if (validationMessages.Any())
                {
                errorMessage = string.Join("; ", validationMessages);
                Console.WriteLine("Błędy walidacji: ");
                foreach (var message in validationMessages)
                    {
                Console.WriteLine($"Błąd: {message}");
            }
            }
                else
                {
                errorMessage = "Sprawdź formularz";
                Console.WriteLine("Walidacja nie powiodła się, ale nie znaleziono konkretnych komunikatów.");
            }
            StateHasChanged();
    }
    }
    */
    private async Task HandleLogin()
    {
        Console.WriteLine($"Rozpoczęcie logowania dla użytkownika: {loginModel.Email}");
        isProcessing = true;

        StateHasChanged();

        try{


            var result = await SignInManager.PasswordSignInAsync(
                loginModel.Email,
                loginModel.Password,
                loginModel.RememberMe,
                lockoutOnFailure: false);

            if (result.Succeeded)
            {
                Console.WriteLine("Logowanie powiodło się. Przekierowanie...");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine($"Logowanie nie powiodło się. Rezultat: {result}");
                errorMessage = "Błąd logowania!";
                if (result.IsLockedOut)
                {
                    errorMessage = "Konto jest tymczasowo zablokowane.";
                }
                else if (result.IsNotAllowed)
                {
                    errorMessage = "Logowanie nie jest dozwolone. Skontaktuj się z administratorem (np. email niepotwierdzony).";
                }


            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task DemoAdminLogin()
    {
        Console.WriteLine("Próba logowania demonstracyjnego jako Admin.");
        // Pre-fill
        loginModel.Email = "admin@example.com";
        loginModel.Password = "Admin123!";
        loginModel.RememberMe = true;

        if (editContext != null) 
        {
            // Potwierdzenie, że editContext jest zainicjowany
            editContext.NotifyValidationStateChanged();

            // Login attempt
            Console.WriteLine($"Dane demo załadowane: Email='{loginModel.Email}'. Walidacja...");
            if (editContext.Validate())
            {
                Console.WriteLine("Walidacja danych demo zakończona sukcesem.");
                await HandleValidFormSubmit();
            }
            else
            {
                errorMessage = "Wystąpił problem z danymi demonstracyjnymi.";
                var validationMessages = editContext.GetValidationMessages().ToList();
                if (validationMessages.Any())
                {
                    errorMessage = string.Join("; ", validationMessages);
                    Console.WriteLine("Błędy walidacji danych demo:");
                    foreach (var msg in validationMessages)
                    {
                        Console.WriteLine($"- {msg}");
                    }
                }
                HandleInvalidFormSubmit();
                Console.WriteLine("Walidacja danych demo nie powiodła się.");
            }
        }
        else
        {
            Console.WriteLine("Błąd: EditContext nie został zainicjalizowany przed logowaniem demo.");
            errorMessage = "Błąd inicjalizacji formularza.";
            StateHasChanged();
        }
    }


    
    
    
}
