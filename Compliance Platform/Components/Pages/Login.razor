@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Compliance_Platform.Model
@using System.ComponentModel.DataAnnotations
@inject UserManager<CompPlatformUser> UserManager
@inject SignInManager<CompPlatformUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider


<PageTitle>Logowanie</PageTitle>

<div class="row">
    <div class="col-md-6 offset-md-3">
        <div class="card">
            <div class="card-header">
                <h3>Logowanie</h3>
            </div>
            <div class="card-body">
                <EditForm FormName="LoginForm" Model="@loginModel" OnValidSubmit="HandleLogin"
                        @* EditContext="@editContext" OnSubmit="PreventDefaultSubmit" *@
                >
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Hasło</label>
                        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                        <label class="form-check-label" for="rememberMe">Zapamiętaj mnie</label>
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@isProcessing">@(isProcessing ? "Ładowanie..." : "Zaloguj")</button>
                    </div>
                </EditForm>

                <div class="mt-3 text-center">
                    <p>Nie masz konta? <a href="/register">Zarejestruj!</a></p>
                </div>

                <div class="mt-3">
                    <button type="button" class="btn btn-outline-secondary" @onclick="DemoAdminLogin">
                        Demo: Zaloguj jako Admin
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    //private EditContext editContext;
    private bool isProcessing = false;

    /*
    protected override void OnInitialized()
    {
        editContext = new EditContext(loginModel);
        base.OnInitialized();
    }
    */

    private async Task DemoAdminLogin()
    {
        // Pre-fill
        loginModel.Email = "admin@example.com";
        loginModel.Password = "Admin123!";

        
        await HandleLogin();
    }

    private async Task HandleLogin()
    {
        try{
            if (isProcessing) return;

            isProcessing = true;
            StateHasChanged();

            var result = await SignInManager.PasswordSignInAsync(
                loginModel.Email,
                loginModel.Password,
                loginModel.RememberMe,
                lockoutOnFailure: false);

            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Błąd logowania!";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd: {ex.Message}";
            StateHasChanged();
            Console.WriteLine(ex);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Niewłaściwy format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Hasło jest wymagane")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }

}
